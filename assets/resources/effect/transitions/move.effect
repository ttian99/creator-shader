// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        texture2: { value: white }
        time: { value: 0 }
        fromTime: { value: 0.2 }
}%


CCProgram transition %{
uniform Transition {
  float fromTime;
};

vec4 transition(vec2 uv) {
  vec4 c;
  if (time < fromTime) {
    c = getFromColor(uv);
    c.rgb *= (time / fromTime) * 5.0 + 1.0;
  }
  else {
    c = getToColor(uv);
    c.rgb *= ((1.0-time) / (1.0-fromTime)) * 5.0 + 1.0;
  }
  return c;
}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram fs %{

precision highp float;

uniform sampler2D texture;
uniform sampler2D texture2;
in mediump vec2 v_uv0;

uniform Time {
  float time;
};

in lowp vec4 v_color;

vec4 getFromColor(vec2 uv) {
  return texture2D(texture, uv);
}

vec4 getToColor(vec2 uv) {
  return texture2D(texture2, uv);
}

#include <transition>

void main () {
  gl_FragColor = v_color * transition(v_uv0);
}

}%

// CCProgram fs %{
//   precision highp float;
  
//   #include <alpha-test>
//   #include <texture>

//   in vec4 v_color;

//   #if USE_TEXTURE
//   in vec2 v_uv0;
//   uniform sampler2D texture;
//   #endif

//   void main () {
//     vec4 o = vec4(1, 1, 1, 1);

//     #if USE_TEXTURE
//       CCTexture(texture, v_uv0, o);
//     #endif

//     o *= v_color;

//     ALPHA_TEST(o);

//     gl_FragColor = o;
//   }
// }%
