// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        pos: {
          value: [0.5, 0.5],
          editor: {
            displayName: "圆心坐标[0-1]",
          }
        }
        radius: {
          value: 0.3,
          editor: {
            displayName: "半径",
            range: [0.0, 1.0]
          }
        }
        color: {
          value: [1.0, 1.0, 1.0, 1.0],
          editor: {
            displayName: "颜色",
          }
        }
        clipAlpha: {
          value: 1.0,
          editor: {
            displayName: "是否裁剪透明区域的光线",
          }
        }
        enableFog: {
          value: 1.0,
          eidtor: {
            tooltip: '是否启用迷雾效果'
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if USE_POINT_LIGHT
  uniform PointLight {
    vec4 color;
    vec2 pos;
    float radius;
    float clipAlpha;
    float enableFog;
  };
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    // 要在图案上方，叠加一个点光，将两者颜色混合起来，那么最终选择的混合模式如下：
    //
    // （点光）color_src: GL_SRC_ALPHA
    // （原图像）color_dest: GL_ONE
    #if USE_POINT_LIGHT
      float dist = distance(pos, v_uv0);
      float alpha = 1.0;
      alpha = (1.0 - (dist / radius));
      // 大于半径不处理:step为步进函数,dist>radius为0.0, dist<radius为1.0
      float isOut = step(dist, radius);
      alpha *= isOut; 
      // 是否裁剪透明区域
      if (bool(clipAlpha)) {
        alpha *= step(0.01, o.a);
      }

      // 是否启用迷雾
      if (bool(enableFog)) {
        o = vec4(0.0, 0.0, 0.0, 1.0 - alpha);
      }

      o = o + (color * alpha);
    #endif

    gl_FragColor = o;
  }
}%
