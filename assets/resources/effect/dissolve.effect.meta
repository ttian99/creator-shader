{
  "ver": "1.0.25",
  "uuid": "93751c58-966d-4dbd-8b4c-95322b5e75be",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_DISSOLVE\nuniform sampler2D noisetex;\nuniform vec4 burnColorInner;\nuniform vec4 burnColorOut;\nuniform float dissolveThreshold;\nuniform float colorWidth;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_DISSOLVE\n    vec4 noise = vec4(1);\n  vec4 noisetex_tmp = texture2D(noisetex, v_uv0 * 3.0);\n  #if CC_USE_ALPHA_ATLAS_noisetex\n      noisetex_tmp.a *= texture2D(noisetex, v_uv0 * 3.0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    noise.rgb *= (noisetex_tmp.rgb * noisetex_tmp.rgb);\n    noise.a *= noisetex_tmp.a;\n  #else\n    noise *= noisetex_tmp;\n  #endif\n    if (noise.r < dissolveThreshold) {\n      discard;\n    }\n    float t = 1.0 - smoothstep(0.0, colorWidth, noise.r - dissolveThreshold);\n    vec3 burnColor = mix(burnColorInner.rgb, burnColorOut.rgb, t);\n    o.rgb = mix(o.rgb, burnColor.rgb,  t*step(0.0001, dissolveThreshold ));\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_DISSOLVE\nuniform sampler2D noisetex;\nuniform Dissolve {\n  vec4 burnColorInner;\n  vec4 burnColorOut;\n  float dissolveThreshold;\n  float colorWidth;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_DISSOLVE\n    vec4 noise = vec4(1);\n  vec4 noisetex_tmp = texture(noisetex, v_uv0 * 3.0);\n  #if CC_USE_ALPHA_ATLAS_noisetex\n      noisetex_tmp.a *= texture(noisetex, v_uv0 * 3.0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    noise.rgb *= (noisetex_tmp.rgb * noisetex_tmp.rgb);\n    noise.a *= noisetex_tmp.a;\n  #else\n    noise *= noisetex_tmp;\n  #endif\n    if (noise.r < dissolveThreshold) {\n      discard;\n    }\n    float t = 1.0 - smoothstep(0.0, colorWidth, noise.r - dissolveThreshold);\n    vec3 burnColor = mix(burnColorInner.rgb, burnColorOut.rgb, t);\n    o.rgb = mix(o.rgb, burnColor.rgb,  t*step(0.0001, dissolveThreshold ));\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}