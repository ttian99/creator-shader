// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        color1: {
          value: [1, 1, 1, 1],
          editor: {
            displayName: "颜色1",
            tooltip: "颜色1",
            type: color
          }
        }
        color2: {
          value: [1, 1, 1, 1],
          editor: {
            displayName: "颜色2",
            tooltip: "颜色2",
            type: color
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  // #if USE_HSV
  uniform SingleColor {
    vec4 color1;
    vec4 color2;
    // float hue;
    // float saturation;
    // float val;
  };
  // #endif

float blendColorDodge(float base, float blend) {
  return (blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0);
}

vec3 blendColorDodge(vec3 base, vec3 blend) {
  return vec3(blendColorDodge(base.r, blend.r), blendColorDodge(base.g, blend.g), blendColorDodge(base.b, blend.b));
}

vec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {
  return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));
}

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    // vec4 color3 = vec4(1, 1, 1, 1);
    // color3 = (color1 * color2);

    // vec4 color4 = color3 / 128.0;
    vec3 temp1 = blendColorDodge(color2.rgb, color1.rgb, 0.5);
    vec3 temp2 = blendColorDodge(o.rgb, color2.rgb, 0.5);
    // vec4 color3 = vec4(temp1 * temp2);
    // vec3 cccc = blendColorDodge(color1.rgb, color2.rgb, 0.5);

    vec4 color3 = vec4(temp1.r, temp1.g, temp1.b, 0.5);
    vec4 color4 = vec4(temp2.r, temp2.g, temp2.b, 0.5);
    // vec3 cccc = blendColorDodge(color1.rgb, color2.rgb, 0.5);
    // vec4 color3 = vec4(cccc.r, cccc.g, cccc.b, 0.5);
    
  
    o *= color3 + color4;

    ALPHA_TEST(o);

    // #if USE_HSV
      // o * = color1;
      // o * = color2;

      // o *= color1;
      // o *= color2;
      // mix()
      // o += color1 + color2;
    // #endif

    gl_FragColor = o;
  }
}%
