{
  "ver": "1.0.25",
  "uuid": "0de09b10-b6d5-4d6a-bd4a-848f19127f8c",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_HSV\nuniform float hue;\nuniform float saturation;\nuniform float val;\nvec3 rgb_to_hsv(vec3 rgb) {\n  float R = rgb.x;\n  float G = rgb.y;\n  float B = rgb.z;\n  vec3 hsv;\n  float max1 = max(R, max(G, B));\n  float min1 = min(R, min(G, B));\n  if (R == max1) {\n      hsv.x = (G - B) / (max1 - min1);\n  }\n  if (G == max1) {\n      hsv.x = 2.0 + (B - R) / (max1 - min1);\n  }\n  if (B == max1) {\n      hsv.x = 4.0 + (R - G) / (max1 - min1);\n  }\n  hsv.x = hsv.x * 60.0;\n  if (hsv.x < 0.0) {\n      hsv.x = hsv.x + 360.0;\n  }\n  hsv.z = max1;\n  hsv.y = (max1 - min1) / max1;\n  return hsv;\n}\nvec3 hsv_to_rgb(vec3 hsv) {\n  float R;\n      float G;\n      float B;\n      if (hsv.y == 0.0) {\n          R = G = B = hsv.z;\n      }\n      else {\n      hsv.x = hsv.x / 60.0;\n      int i = int(hsv.x);\n      float f = hsv.x - float(i);\n      float a = hsv.z * (1.0 - hsv.y);\n      float b = hsv.z * (1.0 - hsv.y * f);\n      float c = hsv.z * (1.0 - hsv.y * (1.0 - f));\n      if (i == 0) {\n          R = hsv.z;\n          G = c;\n          B = a;\n      }\n      else if (i == 1) {\n          R = b;\n          G = hsv.z;\n          B = a;\n      }\n      else if (i == 2) {\n          R = a;\n          G = hsv.z;\n          B = c;\n      }\n      else if (i == 3) {\n          R = a;\n          G = b;\n          B = hsv.z;\n      }\n      else if (i == 4) {\n          R = c;\n          G = a;\n          B = hsv.z;\n      }\n      else {\n          R = hsv.z;\n          G = a;\n          B = b;\n      }\n  }\n  return vec3(R, G, B);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_HSV\n    vec3 rgbColor = vec3(o.xyz);\n    vec3 hsvColor;\n    hsvColor.xyz = rgb_to_hsv(rgbColor);\n    hsvColor.x += hue;\n    hsvColor.x = mod(hsvColor.x, 360.0);\n    hsvColor.y *= saturation;\n    hsvColor.z *= val;\n    o.xyz = hsv_to_rgb(hsvColor);\n  #endif\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_HSV\nuniform SingleColor {\n  float hue;\n  float saturation;\n  float val;\n};\nvec3 rgb_to_hsv(vec3 rgb) {\n  float R = rgb.x;\n  float G = rgb.y;\n  float B = rgb.z;\n  vec3 hsv;\n  float max1 = max(R, max(G, B));\n  float min1 = min(R, min(G, B));\n  if (R == max1) {\n      hsv.x = (G - B) / (max1 - min1);\n  }\n  if (G == max1) {\n      hsv.x = 2.0 + (B - R) / (max1 - min1);\n  }\n  if (B == max1) {\n      hsv.x = 4.0 + (R - G) / (max1 - min1);\n  }\n  hsv.x = hsv.x * 60.0;\n  if (hsv.x < 0.0) {\n      hsv.x = hsv.x + 360.0;\n  }\n  hsv.z = max1;\n  hsv.y = (max1 - min1) / max1;\n  return hsv;\n}\nvec3 hsv_to_rgb(vec3 hsv) {\n  float R;\n      float G;\n      float B;\n      if (hsv.y == 0.0) {\n          R = G = B = hsv.z;\n      }\n      else {\n      hsv.x = hsv.x / 60.0;\n      int i = int(hsv.x);\n      float f = hsv.x - float(i);\n      float a = hsv.z * (1.0 - hsv.y);\n      float b = hsv.z * (1.0 - hsv.y * f);\n      float c = hsv.z * (1.0 - hsv.y * (1.0 - f));\n      if (i == 0) {\n          R = hsv.z;\n          G = c;\n          B = a;\n      }\n      else if (i == 1) {\n          R = b;\n          G = hsv.z;\n          B = a;\n      }\n      else if (i == 2) {\n          R = a;\n          G = hsv.z;\n          B = c;\n      }\n      else if (i == 3) {\n          R = a;\n          G = b;\n          B = hsv.z;\n      }\n      else if (i == 4) {\n          R = c;\n          G = a;\n          B = hsv.z;\n      }\n      else {\n          R = hsv.z;\n          G = a;\n          B = b;\n      }\n  }\n  return vec3(R, G, B);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_HSV\n    vec3 rgbColor = vec3(o.xyz);\n    vec3 hsvColor;\n    hsvColor.xyz = rgb_to_hsv(rgbColor);\n    hsvColor.x += hue;\n    hsvColor.x = mod(hsvColor.x, 360.0);\n    hsvColor.y *= saturation;\n    hsvColor.z *= val;\n    o.xyz = hsv_to_rgb(hsvColor);\n  #endif\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}